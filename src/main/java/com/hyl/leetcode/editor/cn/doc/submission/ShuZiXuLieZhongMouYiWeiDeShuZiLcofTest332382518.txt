class Solution {
    public int findNthDigit(int n) {
        if (n <= 0) {
            return -1;
        }



        long cum = 0;

        long max = 9;
        long lastMax = 0;
        while (max<n){
            cum++;
            long ten = 1;
            for (int i = 1;i<=cum;i++){
                ten *=10;
            }
            lastMax = max;
            max += 9 * ten * (cum+1);
        }



        long ten = 1;
        for (int i = 0;i<=cum-1;i++){
            ten *=10;
        }

        long diff = n - lastMax;

        long diffCount = diff/(cum+1);



        long cunNum = ten + diffCount ;

        int ch = Math.toIntExact((int) diff % (cum + 1));


        if (ch==0){
            cunNum --;
            char[] chars = String.valueOf(cunNum)
                .toCharArray();
            return Integer.parseInt(String.valueOf(chars[chars.length-1]));
        }else {

            char[] chars = String.valueOf(cunNum)
                .toCharArray();
            return Integer.parseInt(String.valueOf(chars[ch-1]));
        }
    }
}

//runtime:0 ms
//memory:38.1 MB
