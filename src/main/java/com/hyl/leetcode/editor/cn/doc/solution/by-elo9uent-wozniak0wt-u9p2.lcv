* java

```java
class Solution {
    Stack<TreeNode> stack = new Stack<>();
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // 如果树为空，或者递归超过了叶子节点，则返回空
        if (root == null)
            return null;

        // 子树树根是p q任意节点，则直接返回。
        // 因为父节点不可能跑到pq的子节点里找，并且一个节点的父节点可以是该节点本身。
        // 所以p和q各自的最近父节点就是其本身。
        // 只找到任意一个就可以返回的原因是，若剩下的节点在子树中，那最小公共父节点就是当前节点。
        if (root == p || root == q)
            return root;

        // 否则就分别在左右子树找目标节点pq。
        // 因为是二叉搜索树，可以通过值对比判断子节点是在左子树还是右子树
        TreeNode father = null;
        // pq都比root小，都在root的左子树，说明最近公共父节点也在左子树
        if (p.val < root.val && q.val < root.val)
            father = lowestCommonAncestor(root.left, p, q);
        // po都比root大，都在root的右子树，说明最近公共父节点也在右子树
        if (p.val > root.val && q.val > root.val)
            father = lowestCommonAncestor(root.right, p, q);

        // 到这了说明pq一个比root小一个比root大，此时root就是最近公共父节点
        return father == null ? root : father;
    }
}
```

![图片.png](https://pic.leetcode-cn.com/1657208438-yQtVle-%E5%9B%BE%E7%89%87.png)
