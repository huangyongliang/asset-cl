[详细刷题视频合集](https://xiaochen1024.com/series/6196129fc1553b002e57bef5/6196208ec1553b002e57bef6)      
[刷题笔记](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18)

- 思路：循环行和列，尝试在每个位置放置1-9，并检验合法性，包括行、列、3 * 3方块的合法性，如果合法继续循环，直到找到一个合法的解，如果不合法，则回溯状态，并继续尝试其他的可能性
- 复杂度分析：同36题

js:

* js

```js
var solveSudoku = function(board) {
    function isValid(row, col, val, board) {
        let len = board.length
        // 行中的数字不能重复
        for(let i = 0; i < len; i++) {
            if(board[row][i] === val) {
                return false
            }
        }
        // 列中的数字不能重复
        for(let i = 0; i < len; i++) {
            if(board[i][col] === val) {
                return false
            }
        }
        let startRow = Math.floor(row / 3) * 3
        let startCol = Math.floor(col / 3) * 3

        //方块中的数字不能重复
        for(let i = startRow; i < startRow + 3; i++) {
            for(let j = startCol; j < startCol + 3; j++) {
                if(board[i][j] === val) {
                    return false
                }
            }
        }

        return true
    }

    function backTracking() {//回溯函数
        for(let i = 0; i < board.length; i++) {
            for(let j = 0; j < board[0].length; j++) {//循环行和列
                if(board[i][j] !== '.') continue
                for(let val = 1; val <= 9; val++) {//尝试在当前单元格放置1-9
                    if(isValid(i, j, `${val}`, board)) {//判断放置数字的合法性
                        board[i][j] = `${val}`//放置数字
                        if (backTracking()) {//合法返回ture
                            return true
                        }
                        
                        board[i][j] = `.`//不合法回溯状态
                    }
                }
                return false//1-9的数字都不合法，返回false
            }
        }
        return true//全部可能性都尝试完成 返回true 说明有解
    }
    backTracking()
    return board
    
};
```

Java:

* java

```java
class Solution {
    public void solveSudoku(char[][] board) {
        backTracking(board);
    }

    private boolean backTracking(char[][] board){
        for (int i = 0; i < 9; i++){ // 遍历行
            for (int j = 0; j < 9; j++){ // 遍历列
                if (board[i][j] != '.'){ 
                    continue;
                }
                for (char k = '1'; k <= '9'; k++){ //尝试在当前位置放置1-9
                    if (isValid(i, j, k, board)){
                        board[i][j] = k;//放置数字
                        if (backTracking(board)){ //合法返回ture
                            return true;
                        }
                        board[i][j] = '.';
                    }
                }
                return false;//1-9的数字都不合法，返回false
            }
        }
        return true;//全部可能性都尝试完成 返回true 说明有解
    }

    
    private boolean isValid(int row, int col, char val, char[][] board){
        // 同行是否重复
        for (int i = 0; i < 9; i++){
            if (board[row][i] == val){
                return false;
            }
        }
        // 同列是否重复
        for (int j = 0; j < 9; j++){
            if (board[j][col] == val){
                return false;
            }
        }
        // 小方块中的元素是否重复
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for (int i = startRow; i < startRow + 3; i++){
            for (int j = startCol; j < startCol + 3; j++){
                if (board[i][j] == val){
                    return false;
                }
            }
        }
        return true;
    }
}

```

